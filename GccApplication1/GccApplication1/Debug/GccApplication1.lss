
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006a  0080006a  00000328  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000033f  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000013d  00000000  00000000  00000e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000023d  00000000  00000000  00000f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000058  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000172  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000011c  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e8       	ldi	r30, 0x8A	; 138
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 37       	cpi	r26, 0x73	; 115
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	64 d0       	rcall	.+200    	; 0x122 <main>
  5a:	15 c1       	rjmp	.+554    	; 0x286 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_4>:


// Timer 1 output compare A interrupt service routine
//interrupt [TIM1_COMPA] void timer1_compa_isr(void)    //Прерывание происходит 100 раз в сек, сохраняем в глобальные переменные текущее время
ISR(TIMER1_COMPA_vect)
{ milliseconds++;
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	80 91 6b 00 	lds	r24, 0x006B
  70:	8f 5f       	subi	r24, 0xFF	; 255
  72:	80 93 6b 00 	sts	0x006B, r24
	TCNT1H=0x00;
  76:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
  78:	1c bc       	out	0x2c, r1	; 44
	MCUCR ;
  7a:	95 b7       	in	r25, 0x35	; 53
	if (milliseconds >= 100 )
  7c:	84 36       	cpi	r24, 0x64	; 100
  7e:	38 f0       	brcs	.+14     	; 0x8e <__vector_4+0x30>
	{
		milliseconds = 0;
  80:	10 92 6b 00 	sts	0x006B, r1
		seconds++;
  84:	80 91 6e 00 	lds	r24, 0x006E
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	80 93 6e 00 	sts	0x006E, r24
	};
	
	if (seconds >= 10)
  8e:	80 91 6e 00 	lds	r24, 0x006E
  92:	8a 30       	cpi	r24, 0x0A	; 10
  94:	38 f0       	brcs	.+14     	; 0xa4 <__vector_4+0x46>
	{
		seconds = 0;
  96:	10 92 6e 00 	sts	0x006E, r1
		ten_seconds++;
  9a:	80 91 6d 00 	lds	r24, 0x006D
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 6d 00 	sts	0x006D, r24
	};
	
	if (ten_seconds >= 6)
  a4:	80 91 6d 00 	lds	r24, 0x006D
  a8:	86 30       	cpi	r24, 0x06	; 6
  aa:	38 f0       	brcs	.+14     	; 0xba <__vector_4+0x5c>
	{
		ten_seconds = 0;
  ac:	10 92 6d 00 	sts	0x006D, r1
		minutes++;
  b0:	80 91 71 00 	lds	r24, 0x0071
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 71 00 	sts	0x0071, r24
	};
	
	if (minutes >= 10)
  ba:	80 91 71 00 	lds	r24, 0x0071
  be:	8a 30       	cpi	r24, 0x0A	; 10
  c0:	38 f0       	brcs	.+14     	; 0xd0 <__vector_4+0x72>
	{
		minutes = 0;
  c2:	10 92 71 00 	sts	0x0071, r1
		ten_minutes++;
  c6:	80 91 6a 00 	lds	r24, 0x006A
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 6a 00 	sts	0x006A, r24
	};
	
	if (ten_minutes >= 6)
  d0:	80 91 6a 00 	lds	r24, 0x006A
  d4:	86 30       	cpi	r24, 0x06	; 6
  d6:	38 f0       	brcs	.+14     	; 0xe6 <__stack+0x7>
	{
		ten_minutes = 0;
  d8:	10 92 6a 00 	sts	0x006A, r1
		hours++;
  dc:	80 91 72 00 	lds	r24, 0x0072
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 72 00 	sts	0x0072, r24
	};

	if (hours >= 10)
  e6:	80 91 72 00 	lds	r24, 0x0072
  ea:	8a 30       	cpi	r24, 0x0A	; 10
  ec:	38 f0       	brcs	.+14     	; 0xfc <__stack+0x1d>
	{
		hours = 0;
  ee:	10 92 72 00 	sts	0x0072, r1
		ten_hours++;
  f2:	80 91 70 00 	lds	r24, 0x0070
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 70 00 	sts	0x0070, r24
	};

	if (ten_hours >= 2 && hours == 4)
  fc:	80 91 70 00 	lds	r24, 0x0070
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	40 f0       	brcs	.+16     	; 0x114 <__stack+0x35>
 104:	80 91 72 00 	lds	r24, 0x0072
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	21 f4       	brne	.+8      	; 0x114 <__stack+0x35>
	{
		ten_hours = 0;
 10c:	10 92 70 00 	sts	0x0070, r1
		hours=0;
 110:	10 92 72 00 	sts	0x0072, r1
	};
	

}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <main>:



int main()
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	dd 27       	eor	r29, r29
 12a:	ca 50       	subi	r28, 0x0A	; 10
 12c:	cd bf       	out	0x3d, r28	; 61
	unsigned char digits[10] = {18, 159, 56, 28, 149, 84, 80, 31, 16, 20};     //массив для генерации цифр. Какой элемент массива будет отправлен в порт, такая цифра и загорится.
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	e0 e6       	ldi	r30, 0x60	; 96
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	8a 95       	dec	r24
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x16>


	// Crystal Oscillator division factor: 1

	CLKPR=0x80;
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	86 bd       	out	0x26, r24	; 38
	CLKPR=0x00;
 144:	16 bc       	out	0x26, r1	; 38

	// Input/Output Ports initialization
	// Port A initialization
	// Func2=In Func1=In Func0=In
	// State2=T State1=T State0=T
	PORTA=0x00;
 146:	1b ba       	out	0x1b, r1	; 27
	DDRA=0x00;
 148:	1a ba       	out	0x1a, r1	; 26

	// Port B initialization
	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
	// State7=1 State6=1 State5=1 State4=1 State3=1 State2=1 State1=1 State0=1
	PORTB=0xFF;
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	98 bb       	out	0x18, r25	; 24
	DDRB=0xFF;
 14e:	97 bb       	out	0x17, r25	; 23

	// Port D initialization
	// Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
	// State6=0 State5=0 State4=0 State3=0 State2=0 State1=P State0=P
	PORTD=0x03;
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	92 bb       	out	0x12, r25	; 18
	DDRD=0x7C;
 154:	9c e7       	ldi	r25, 0x7C	; 124
 156:	91 bb       	out	0x11, r25	; 17
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=FFh
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=0x00;
 158:	10 be       	out	0x30, r1	; 48
	TCCR0B=0x00;
 15a:	13 be       	out	0x33, r1	; 51
	TCNT0=0x00;
 15c:	12 be       	out	0x32, r1	; 50
	OCR0A=0x00;
 15e:	16 be       	out	0x36, r1	; 54
	OCR0B=0x00;
 160:	1c be       	out	0x3c, r1	; 60
	// Input Capture on Falling Edge
	// Timer 1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: On
	// Compare B Match Interrupt: Off
	TCCR1A=0x00;
 162:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x04;
 164:	94 e0       	ldi	r25, 0x04	; 4
 166:	9e bd       	out	0x2e, r25	; 46
	TCNT1H=0x00;
 168:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 16a:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
 16c:	15 bc       	out	0x25, r1	; 37
	ICR1L=0x00;
 16e:	14 bc       	out	0x24, r1	; 36
	OCR1AH=0x02;
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	9b bd       	out	0x2b, r25	; 43
	OCR1AL=0x70;
 174:	90 e7       	ldi	r25, 0x70	; 112
 176:	9a bd       	out	0x2a, r25	; 42
	OCR1BH=0x00;
 178:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 17a:	18 bc       	out	0x28, r1	; 40

	// External Interrupt(s) initialization
	// INT0: Off
	// INT1: Off
	// Interrupt on any change on pins PCINT0-7: Off
	GIMSK=0x00;
 17c:	1b be       	out	0x3b, r1	; 59
	MCUCR=0x00;
 17e:	15 be       	out	0x35, r1	; 53

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=0x40;
 180:	90 e4       	ldi	r25, 0x40	; 64
 182:	99 bf       	out	0x39, r25	; 57

	// Universal Serial Interface initialization
	// Mode: Disabled
	// Clock source: Register & Counter=no clk.
	// USI Counter Overflow Interrupt: Off
	USICR=0x00;
 184:	1d b8       	out	0x0d, r1	; 13

	// Analog Comparator initialization
	// Analog Comparator: Off
	// Analog Comparator Input Capture by Timer/Counter 1: Off
	ACSR=0x80;
 186:	88 b9       	out	0x08, r24	; 8

	// Global enable interrupts
	sei();
 188:	78 94       	sei
		
		if ((PIND & 1<<0) == 0 && button_pressed1 == 0)                     //Если нажата кнопка 1
		{
			_delay_ms(1);
			hours++;
			button_pressed1 = 1;
 18a:	91 e0       	ldi	r25, 0x01	; 1
	// Global enable interrupts
	sei();

	while (1)
	{
		PORTD |=1<<5;                              //включаем первый индикатор
 18c:	95 9a       	sbi	0x12, 5	; 18
		PORTB = digits[ten_hours];                 //выводим на него десятки часов
 18e:	80 91 70 00 	lds	r24, 0x0070
 192:	e1 e0       	ldi	r30, 0x01	; 1
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	e8 0f       	add	r30, r24
 19c:	f1 1d       	adc	r31, r1
 19e:	80 81       	ld	r24, Z
 1a0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	ef e9       	ldi	r30, 0x9F	; 159
 1a4:	ff e0       	ldi	r31, 0x0F	; 15
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x84>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x8a>
 1ac:	00 00       	nop
		_delay_ms(digit_display_time);              //ждем, время индикации одного разряда задается в заголовке программы
		PORTD &=~(1<<5);                           //выключаем первый индикатор и переходим дальше и так в цикле для каждого из 4 разрядов
 1ae:	95 98       	cbi	0x12, 5	; 18
		PORTD |=1<<4;
 1b0:	94 9a       	sbi	0x12, 4	; 18
		PORTB = digits[hours];
 1b2:	80 91 72 00 	lds	r24, 0x0072
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	e8 0f       	add	r30, r24
 1c0:	f1 1d       	adc	r31, r1
 1c2:	80 81       	ld	r24, Z
 1c4:	88 bb       	out	0x18, r24	; 24
		if (milliseconds >= 50) PORTB &=~(1<<4); else PORTB|=1<<4;  //моргание точки
 1c6:	80 91 6b 00 	lds	r24, 0x006B
 1ca:	82 33       	cpi	r24, 0x32	; 50
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <main+0xb0>
 1ce:	c4 98       	cbi	0x18, 4	; 24
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <main+0xb2>
 1d2:	c4 9a       	sbi	0x18, 4	; 24
 1d4:	ef e9       	ldi	r30, 0x9F	; 159
 1d6:	ff e0       	ldi	r31, 0x0F	; 15
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0xb6>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xbc>
 1de:	00 00       	nop
		_delay_ms(digit_display_time);
		PORTD &=~(1<<4);
 1e0:	94 98       	cbi	0x12, 4	; 18
		PORTD |=1<<3;
 1e2:	93 9a       	sbi	0x12, 3	; 18
		PORTB = digits[ten_minutes];
 1e4:	80 91 6a 00 	lds	r24, 0x006A
 1e8:	e1 e0       	ldi	r30, 0x01	; 1
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ec 0f       	add	r30, r28
 1ee:	fd 1f       	adc	r31, r29
 1f0:	e8 0f       	add	r30, r24
 1f2:	f1 1d       	adc	r31, r1
 1f4:	80 81       	ld	r24, Z
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	ef e9       	ldi	r30, 0x9F	; 159
 1fa:	ff e0       	ldi	r31, 0x0F	; 15
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0xda>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0xe0>
 202:	00 00       	nop
		_delay_ms(digit_display_time);
		PORTD &=~(1<<3);
 204:	93 98       	cbi	0x12, 3	; 18
		PORTD |=1<<6;
 206:	96 9a       	sbi	0x12, 6	; 18
		PORTB = digits[minutes];
 208:	80 91 71 00 	lds	r24, 0x0071
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	e8 0f       	add	r30, r24
 216:	f1 1d       	adc	r31, r1
 218:	80 81       	ld	r24, Z
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	ef e9       	ldi	r30, 0x9F	; 159
 21e:	ff e0       	ldi	r31, 0x0F	; 15
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0xfe>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x104>
 226:	00 00       	nop
		_delay_ms(digit_display_time);
		PORTD &=~(1<<6);
 228:	96 98       	cbi	0x12, 6	; 18
		
		//а вот теперь проверим кнопочки в стиле часов Электроника 13
		
		if ((PIND & 1<<0) == 0 && button_pressed1 == 0)                     //Если нажата кнопка 1
 22a:	80 99       	sbic	0x10, 0	; 16
 22c:	11 c0       	rjmp	.+34     	; 0x250 <main+0x12e>
 22e:	80 91 6f 00 	lds	r24, 0x006F
 232:	81 11       	cpse	r24, r1
 234:	0d c0       	rjmp	.+26     	; 0x250 <main+0x12e>
 236:	ef e9       	ldi	r30, 0x9F	; 159
 238:	ff e0       	ldi	r31, 0x0F	; 15
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x118>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x11e>
 240:	00 00       	nop
		{
			_delay_ms(1);
			hours++;
 242:	80 91 72 00 	lds	r24, 0x0072
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 72 00 	sts	0x0072, r24
			button_pressed1 = 1;
 24c:	90 93 6f 00 	sts	0x006F, r25
		};
		
		if ((PIND & 1<<0) == 1) button_pressed1=0;                          //Если отпущена то   сбрасываем флаг
 250:	80 99       	sbic	0x10, 0	; 16
 252:	10 92 6f 00 	sts	0x006F, r1
		

		
		if ((PIND & 1<<1) == 0 && button_pressed2 == 0)                     //Если нажата  кнопка 2
 256:	81 99       	sbic	0x10, 1	; 16
 258:	11 c0       	rjmp	.+34     	; 0x27c <main+0x15a>
 25a:	80 91 6c 00 	lds	r24, 0x006C
 25e:	81 11       	cpse	r24, r1
 260:	0d c0       	rjmp	.+26     	; 0x27c <main+0x15a>
 262:	ef e9       	ldi	r30, 0x9F	; 159
 264:	ff e0       	ldi	r31, 0x0F	; 15
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x144>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x14a>
 26c:	00 00       	nop
		{
			_delay_ms(1);
			minutes++;
 26e:	80 91 71 00 	lds	r24, 0x0071
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 71 00 	sts	0x0071, r24
			button_pressed2 = 1;
 278:	90 93 6c 00 	sts	0x006C, r25
		};
		
		if (PIND & 1<<1) button_pressed2=0;
 27c:	81 9b       	sbis	0x10, 1	; 16
 27e:	86 cf       	rjmp	.-244    	; 0x18c <main+0x6a>
 280:	10 92 6c 00 	sts	0x006C, r1
 284:	83 cf       	rjmp	.-250    	; 0x18c <main+0x6a>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
